<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Help.Html" xml:space="preserve">
    <value>&lt;h2&gt;Help for DbReplace&lt;/h2&gt;
&lt;div class="dnnFormMessage dnnFormValidationSummary"&gt;This module allows you to completely wreck your site, if you don't know what you're doing.&lt;/div&gt;
&lt;p&gt;This Manipulator Module allows you to perform text replaces in the database by specififying SQL statements and using regular expressions&lt;/p&gt;
&lt;h6&gt;Connection string&lt;/h6&gt;
&lt;p&gt;Select the connection string to use&lt;/p&gt;
&lt;h6&gt;SQL SELECT Statement&lt;/h6&gt;
&lt;p&gt;Write the SELECT statement to get the texts to perform a replace on, from your database. It needs to output several fixed column names:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ContentId&lt;/strong&gt;: The (INT) Id field of the record&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ContentText&lt;/strong&gt;: The text field of the record containing the text for search/replace&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ContentTitle&lt;/strong&gt;: The title field of the record, for display only&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PortalId&lt;/strong&gt;: The (INT) PortalId field of the record&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TabId&lt;/strong&gt;: The (INT) TabId field of the record&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ModuleId&lt;/strong&gt;: The (INT) ModuleId field of the record&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DetailId&lt;/strong&gt;: The (INT) DetailId field of the record&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;
SELECT
    PortalId, ModuleId,
    x AS ContentId,
    y AS ContentText,
    z AS ContentTitle
FROM
    MyCustomTable
&lt;/pre&gt;&lt;/p&gt;
&lt;h6&gt;SQL UPDATE Statement&lt;h6&gt;
&lt;p&gt;Write the update statement used for updating the database after the replace.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;
UPDATE MyCustomTable SET
    y = '[newtext]'
WHERE
  x = [ContentId]
&lt;/pre&gt;&lt;/p&gt;
&lt;h6&gt;Search/Replace pairs (1-3)&lt;/h6&gt;
&lt;p&gt;search an replace values&lt;/p&gt;
&lt;h6&gt;All Portals&lt;/h6&gt;
&lt;p&gt;Check to replace for all portals, uncheck to only do the current portal&lt;/p&gt;
&lt;h6&gt;Case sensitive&lt;/h6&gt; 
&lt;p&gt;Check to make the search case sensitive&lt;/p&gt;
&lt;h3&gt;Show/Load Json&lt;/h3&gt;
&lt;p&gt;Using the "Show Json" button will give you a JSON string of your current configuration. If you save this JSON (yourself, this modules doesn't do it for you), you can use the Load Json function later on to quickly reuse that same configuration.&lt;/p&gt;</value>
  </data>
</root>